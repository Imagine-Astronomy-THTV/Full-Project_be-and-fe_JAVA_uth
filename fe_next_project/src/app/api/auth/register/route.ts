import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

// ====== Ki·ªÉu d·ªØ li·ªáu cho ph·∫£n h·ªìi t·ª´ backend ======
type AuthResponse = {
  ok: boolean;
  message: string;
  token: string;
  user: {
    id: number;
    fullName: string | null;
    email: string;
    role: string;
  };
};

type RegisterError = { error: string };

// ====== H√†m ti·ªán √≠ch: x√°c ƒë·ªãnh c√≥ n√™n set cookie Secure hay kh√¥ng ======
// - prod sau reverse proxy: ∆∞u ti√™n header X-Forwarded-Proto
// - dev (http://localhost) th√¨ Secure = false
function isHttps(req: NextRequest): boolean {
  const xfProto = req.headers.get('x-forwarded-proto');
  if (xfProto) return xfProto.includes('https');
  try {
    return new URL(req.url).protocol === 'https:';
  } catch {
    return false;
  }
}

// ====== Route handler - Proxy ƒë·∫øn backend ======
export async function POST(req: NextRequest) {
  try {
    // ƒê·ªçc & ki·ªÉm tra ƒë·∫ßu v√†o
    const { email, password, role } = (await req.json()) as {
      email?: string;
      password?: string;
      role?: string;
    };

    if (!email || !password) {
      const body: RegisterError = { error: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u.' };
      return NextResponse.json(body, { status: 400 });
    }

    // G·ªçi API backend
    const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8081';
    const requestBody: { email: string; password: string; role?: string } = {
      email,
      password,
    };
    
    // Ch·ªâ th√™m role n·∫øu c√≥
    if (role) {
      requestBody.role = role;
    }

    const response = await fetch(`${backendUrl}/api/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    const data = await response.json();

    if (!response.ok) {
      const errorBody: RegisterError = { 
        error: data.message || data.error || 'ƒêƒÉng k√Ω th·∫•t b·∫°i!' 
      };
      return NextResponse.json(errorBody, { status: response.status });
    }

    // Parse response t·ª´ backend
    const authResponse = data as AuthResponse;

    // T·∫°o response JSON
    const res = NextResponse.json<AuthResponse>(
      {
        ok: authResponse.ok,
        message: authResponse.message,
        token: authResponse.token,
        user: authResponse.user,
      },
      { status: 200 }
    );

    // Set cookie HttpOnly ƒë·ªÉ tr√¨nh duy·ªát t·ª± g·ª≠i k√®m v·ªÅ sau
    if (authResponse.token) {
      res.cookies.set('token', authResponse.token, {
        httpOnly: true,
        sameSite: 'lax',
        secure: isHttps(req), // true khi ch·∫°y https (prod)
        path: '/',
        maxAge: 60 * 60 * 24 * 7, // 7 ng√†y
      });
    }

    return res;
  } catch (err: unknown) {
    console.error('üî• L·ªói khi ƒëƒÉng k√Ω:', err);
    const errorBody: RegisterError = { error: 'L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau!' };
    return NextResponse.json(errorBody, { status: 500 });
  }
}

